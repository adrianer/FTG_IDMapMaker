/*
 * IDMapPanel.java
 *
 * Created on January 12, 2008, 3:38 PM
 */

package idmapmaker;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Rectangle;
import java.awt.RenderingHints;
import java.awt.font.FontRenderContext;
import java.awt.geom.AffineTransform;
import java.awt.geom.Rectangle2D;
import java.awt.image.AffineTransformOp;
import java.awt.image.BufferedImage;
import java.awt.image.BufferedImageOp;

/**
 *
 * @author Michael Myers
 */
public class IDMapPanel extends javax.swing.JPanel {
    
    private IdTbl id;
    private BoundboxTbl bounds;
    private BufferedImage image;
    private BufferedImage scaledImage;
    private double scaleFactor = 0.1;
    private static final double DEFAULT_ZOOM_AMOUNT = 0.025;
    private static final double MIN_SCALE = 0.001;
    private static final double MAX_SCALE = 2.0;
    
    private boolean paintIds = false;
    private boolean paintNames = false;
    private boolean paintSeaIds = false;
    
    public IDMapPanel() {
        initComponents();
    }
    
    public IDMapPanel(IdTbl id, BoundboxTbl bounds) {
        setId(id);
        setBoundbox(bounds);
        initComponents();
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
    }// </editor-fold>//GEN-END:initComponents
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
    
    
    private static final RenderingHints scalingHints = new RenderingHints(null);
    static {
        scalingHints.put(RenderingHints.KEY_INTERPOLATION, RenderingHints.VALUE_INTERPOLATION_BICUBIC); //NEAREST_NEIGHBOR);
//        scalingHints.put(RenderingHints.KEY_DITHERING, RenderingHints.VALUE_DITHER_DISABLE);
        scalingHints.put(RenderingHints.KEY_COLOR_RENDERING, RenderingHints.VALUE_COLOR_RENDER_QUALITY);
        scalingHints.put(RenderingHints.KEY_RENDERING, RenderingHints.VALUE_RENDER_QUALITY);
    }
    
    private void rescaleMap() {
        final BufferedImageOp scaleOp =
                new AffineTransformOp(
                new AffineTransform(scaleFactor, 0.0, 0.0, scaleFactor, 0.0, 0.0),
                scalingHints
                );
        
        if (scaledImage != null) {
            scaledImage.flush();
            scaledImage = null;
        }
        
        scaledImage = new BufferedImage(
                (int) Math.ceil(image.getWidth() * scaleFactor),
                (int) Math.ceil(image.getHeight() * scaleFactor),
                image.getType()
                );
        
        Graphics2D g = scaledImage.createGraphics();
        g.drawImage(image, scaleOp, 0, 0);
        
        g.dispose();
    }
            
    @Override
    protected void paintComponent(Graphics g) {
        if (scaledImage != null) {
            ((Graphics2D)g).drawImage(scaledImage, 0, 0, null);
            if (paintIds)
                paintIds((Graphics2D)g, scaleFactor);
            else if (paintNames)
                paintNames((Graphics2D)g, scaleFactor);
        }
    }
    
    private void paintIds(final Graphics2D g, double scaleFactor) {
        final Font oldFont = g.getFont();
        final Font newFont = oldFont.deriveFont((float)(32.0*scaleFactor)).deriveFont(Font.BOLD);
        g.setFont(newFont);
        final FontRenderContext frc = g.getFontRenderContext();
        final ProvinceData data = id.getProvinceData();
        for (int i = 1; i < ProvinceData.NUM_PROVINCES; i++) {
            if (paintSeaIds || data.isLand(i)) {
                final String str = paintNames ? (i + " (" + data.getName(i) + ")") : Integer.toString(i);
                Rectangle provBounds = bounds.getBounds(i);
                Rectangle2D stringBounds = newFont.getStringBounds(str, frc);
                g.drawString(str,
                        (float) (provBounds.getX()*scaleFactor + (provBounds.getWidth()*scaleFactor-stringBounds.getWidth())/2.0),
                        (float) (provBounds.getY()*scaleFactor + (provBounds.getHeight()*scaleFactor+stringBounds.getHeight())/2.0));
            }
        }
        g.setFont(oldFont);
    }
    
    private void paintNames(final Graphics2D g, double scaleFactor) {
        final Font oldFont = g.getFont();
        final Font newFont = oldFont.deriveFont((float)(32.0*scaleFactor));
        g.setFont(newFont);
        final FontRenderContext frc = g.getFontRenderContext();
        final ProvinceData data = id.getProvinceData();
        for (int i = 1; i < ProvinceData.NUM_PROVINCES; i++) {
            if (data.isLand(i)) {
                final String str = data.getName(i);
                Rectangle provBounds = bounds.getBounds(i);
                Rectangle2D stringBounds = newFont.getStringBounds(str, frc);
                g.drawString(str,
                        (float) (provBounds.getX()*scaleFactor + (provBounds.getWidth()*scaleFactor-stringBounds.getWidth())/2.0),
                        (float) (provBounds.getY()*scaleFactor + (provBounds.getHeight()*scaleFactor-stringBounds.getHeight())/2.0));
            }
        }
        g.setFont(oldFont);
    }

    @Override
    public Dimension getPreferredSize() {
        if (scaledImage != null) {
            return new Dimension(scaledImage.getWidth(), scaledImage.getHeight());
        }
        return super.getPreferredSize();
    }
    
    public void zoomIn() {
        zoomIn(DEFAULT_ZOOM_AMOUNT);
    }
    
    public void zoomIn(double amount) {
        if (scaleFactor <= MAX_SCALE - amount) {
            scaleFactor += amount;
            rescaleMap();
        }
    }
    
    public void zoomOut() {
        zoomOut(DEFAULT_ZOOM_AMOUNT);
    }
    
    public void zoomOut(double amount) {
        if (scaleFactor >= amount + MIN_SCALE) {
            scaleFactor -= amount;
            rescaleMap();
        }
    }

    public IdTbl getId() {
        return id;
    }

    public final void setId(IdTbl id) {
        this.id = id;
        image = id.getImage();
        rescaleMap();
    }

    public BoundboxTbl getBoundbox() {
        return bounds;
    }

    public final void setBoundbox(BoundboxTbl bounds) {
        this.bounds = bounds;
    }
    
    public ProvinceData.Province getProvince(int provid) {
        return id.getProvinceData().getProvince(provid);
    }
    
    public int getProvId(int x, int y) {
        return id.getId((int) (x/scaleFactor), (int) (y/scaleFactor));
    }

    public boolean isPaintIds() {
        return paintIds;
    }

    public void setPaintIds(boolean paintIds) {
        this.paintIds = paintIds;
    }
    
    public boolean isPaintSeaIds() {
        return paintSeaIds;
    }
    
    public void setPaintSeaIds(boolean paintSeaIds) {
        this.paintSeaIds = paintSeaIds;
    }

    public boolean isPaintNames() {
        return paintNames;
    }

    public void setPaintNames(boolean paintNames) {
        this.paintNames = paintNames;
    }
    
    public BufferedImage createFullScaleImage() {
        BufferedImage ret = new BufferedImage(image.getWidth(), image.getHeight(), image.getType());
        Graphics2D g = ret.createGraphics();
        g.drawImage(image, 0, 0, null);
        g.setColor(Color.BLACK);
        if (paintIds)
            paintIds(g, 1.0);
        else if (paintNames)
            paintNames(g, 1.0);
        g.dispose();
        
        return ret;
    }
}
