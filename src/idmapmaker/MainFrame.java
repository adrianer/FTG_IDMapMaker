/*
 * MainFrame.java
 *
 * Created on January 12, 2008, 8:19 PM
 */

package idmapmaker;

import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import javax.imageio.ImageIO;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;

/**
 *
 * @author  Michael
 */
public class MainFrame extends javax.swing.JFrame {
    
    /** Creates new form MainFrame */
    public MainFrame(IdTbl idTbl, BoundboxTbl bounds) {
        initComponents();
        mapPanel.setId(idTbl);
        mapPanel.setBoundbox(bounds);
        mapPanel.repaint();
        pack();
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.JPanel jPanel1 = new javax.swing.JPanel();
        statusLabel = new javax.swing.JLabel();
        mapScrollPane = new javax.swing.JScrollPane();
        mapPanel = new idmapmaker.IDMapPanel();
        javax.swing.JMenuBar jMenuBar1 = new javax.swing.JMenuBar();
        javax.swing.JMenu fileMenu = new javax.swing.JMenu();
        saveMenuItem = new javax.swing.JMenuItem();
        exitMenuItem = new javax.swing.JMenuItem();
        javax.swing.JMenu viewMenu = new javax.swing.JMenu();
        zoomInMenuItem = new javax.swing.JMenuItem();
        zoomOutMenuItem = new javax.swing.JMenuItem();
        javax.swing.JSeparator jSeparator1 = new javax.swing.JSeparator();
        showIdsMenuItem = new javax.swing.JCheckBoxMenuItem();
        showSeaIdsMenuItem = new javax.swing.JCheckBoxMenuItem();
        showNamesMenuItem = new javax.swing.JCheckBoxMenuItem();

        FormListener formListener = new FormListener();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("ID Map Maker");
        addWindowListener(formListener);

        jPanel1.setLayout(new java.awt.BorderLayout());

        statusLabel.setText(" ");
        jPanel1.add(statusLabel, java.awt.BorderLayout.SOUTH);

        mapPanel.addMouseMotionListener(formListener);
        mapScrollPane.setViewportView(mapPanel);

        jPanel1.add(mapScrollPane, java.awt.BorderLayout.CENTER);

        getContentPane().add(jPanel1, java.awt.BorderLayout.CENTER);

        fileMenu.setMnemonic('F');
        fileMenu.setText("File");

        saveMenuItem.setText("Save image...");
        saveMenuItem.addActionListener(formListener);
        fileMenu.add(saveMenuItem);

        exitMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_X, java.awt.event.InputEvent.CTRL_MASK));
        exitMenuItem.setMnemonic('x');
        exitMenuItem.setText("Exit");
        exitMenuItem.addActionListener(formListener);
        fileMenu.add(exitMenuItem);

        jMenuBar1.add(fileMenu);

        viewMenu.setMnemonic('V');
        viewMenu.setText("View");

        zoomInMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_EQUALS, java.awt.event.InputEvent.CTRL_MASK));
        zoomInMenuItem.setMnemonic('i');
        zoomInMenuItem.setText("Zoom in");
        zoomInMenuItem.addActionListener(formListener);
        viewMenu.add(zoomInMenuItem);

        zoomOutMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_MINUS, java.awt.event.InputEvent.CTRL_MASK));
        zoomOutMenuItem.setMnemonic('o');
        zoomOutMenuItem.setText("Zoom out");
        zoomOutMenuItem.setDisplayedMnemonicIndex(5);
        zoomOutMenuItem.addActionListener(formListener);
        viewMenu.add(zoomOutMenuItem);
        viewMenu.add(jSeparator1);

        showIdsMenuItem.setText("Show province IDs");
        showIdsMenuItem.addActionListener(formListener);
        viewMenu.add(showIdsMenuItem);

        showSeaIdsMenuItem.setText("Show sea province IDs");
        showSeaIdsMenuItem.setToolTipText("");
        showSeaIdsMenuItem.setEnabled(false);
        showSeaIdsMenuItem.addActionListener(formListener);
        viewMenu.add(showSeaIdsMenuItem);

        showNamesMenuItem.setText("Show province names");
        showNamesMenuItem.addActionListener(formListener);
        viewMenu.add(showNamesMenuItem);

        jMenuBar1.add(viewMenu);

        setJMenuBar(jMenuBar1);

        pack();
    }

    // Code for dispatching events from components to event handlers.

    private class FormListener implements java.awt.event.ActionListener, java.awt.event.MouseMotionListener, java.awt.event.WindowListener {
        FormListener() {}
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            if (evt.getSource() == exitMenuItem) {
                MainFrame.this.exitMenuItemActionPerformed(evt);
            }
            else if (evt.getSource() == zoomInMenuItem) {
                MainFrame.this.zoomInMenuItemActionPerformed(evt);
            }
            else if (evt.getSource() == zoomOutMenuItem) {
                MainFrame.this.zoomOutMenuItemActionPerformed(evt);
            }
            else if (evt.getSource() == showIdsMenuItem) {
                MainFrame.this.showIdsMenuItemActionPerformed(evt);
            }
            else if (evt.getSource() == showNamesMenuItem) {
                MainFrame.this.showNamesMenuItemActionPerformed(evt);
            }
            else if (evt.getSource() == showSeaIdsMenuItem) {
                MainFrame.this.showSeaIdsMenuItemActionPerformed(evt);
            }
            else if (evt.getSource() == saveMenuItem) {
                MainFrame.this.saveMenuItemActionPerformed(evt);
            }
        }

        public void mouseDragged(java.awt.event.MouseEvent evt) {
        }

        public void mouseMoved(java.awt.event.MouseEvent evt) {
            if (evt.getSource() == mapPanel) {
                MainFrame.this.mapPanelMouseMoved(evt);
            }
        }

        public void windowActivated(java.awt.event.WindowEvent evt) {
        }

        public void windowClosed(java.awt.event.WindowEvent evt) {
        }

        public void windowClosing(java.awt.event.WindowEvent evt) {
            if (evt.getSource() == MainFrame.this) {
                MainFrame.this.formWindowClosing(evt);
            }
        }

        public void windowDeactivated(java.awt.event.WindowEvent evt) {
        }

        public void windowDeiconified(java.awt.event.WindowEvent evt) {
        }

        public void windowIconified(java.awt.event.WindowEvent evt) {
        }

        public void windowOpened(java.awt.event.WindowEvent evt) {
        }
    }// </editor-fold>//GEN-END:initComponents

    private void exitMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitMenuItemActionPerformed
        doClose();
    }//GEN-LAST:event_exitMenuItemActionPerformed

    private void mapPanelMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_mapPanelMouseMoved
        int ID = mapPanel.getProvId(evt.getX(), evt.getY());
        statusLabel.setText(mapPanel.getId().getProvinceData().getName(ID) + " (" + ID + ")");
    }//GEN-LAST:event_mapPanelMouseMoved

    private void zoomOutMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_zoomOutMenuItemActionPerformed
        mapPanel.zoomOut();
        mapPanel.repaint();
        mapScrollPane.setViewport(mapScrollPane.getViewport());
}//GEN-LAST:event_zoomOutMenuItemActionPerformed

    private void zoomInMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_zoomInMenuItemActionPerformed
        mapPanel.zoomIn();
        mapPanel.repaint();
        mapScrollPane.setViewport(mapScrollPane.getViewport());
    }//GEN-LAST:event_zoomInMenuItemActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        doClose();
    }//GEN-LAST:event_formWindowClosing

    private void showIdsMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showIdsMenuItemActionPerformed
        mapPanel.setPaintIds(showIdsMenuItem.isSelected());
        showSeaIdsMenuItem.setEnabled(showIdsMenuItem.isSelected());
        mapPanel.repaint();
    }//GEN-LAST:event_showIdsMenuItemActionPerformed

    private void showNamesMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showNamesMenuItemActionPerformed
        mapPanel.setPaintNames(showNamesMenuItem.isSelected());
        mapPanel.repaint();
    }//GEN-LAST:event_showNamesMenuItemActionPerformed

    private void showSeaIdsMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showSeaIdsMenuItemActionPerformed
        mapPanel.setPaintSeaIds(showSeaIdsMenuItem.isSelected());
        mapPanel.repaint();
    }//GEN-LAST:event_showSeaIdsMenuItemActionPerformed

    private void saveMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveMenuItemActionPerformed
        JFileChooser chooser = new JFileChooser();
        chooser.setFileFilter(new FileNameExtensionFilter("Image files (" + String.join(", ", ImageIO.getWriterFileSuffixes()) + ")", ImageIO.getWriterFileSuffixes()));
        chooser.setDialogTitle("Save image");
        int choice = chooser.showSaveDialog(this);
        if (choice == JFileChooser.APPROVE_OPTION) {
            File outputFile = chooser.getSelectedFile();
            String extension = outputFile.getName().substring(outputFile.getName().lastIndexOf('.') + 1);
            BufferedImage img = mapPanel.createFullScaleImage();
            try {
                if (ImageIO.write(img, extension, outputFile)) {
                    JOptionPane.showMessageDialog(this, "Successfully saved " + outputFile.getAbsolutePath());
                } else {
                    JOptionPane.showMessageDialog(this, "Couldn't save the image file. Please try a different image format.");
                }
            } catch (IOException ex) {
                JOptionPane.showMessageDialog(this, "Error saving image!", "Error", JOptionPane.ERROR_MESSAGE);
                ex.printStackTrace();
            } finally {
                img.flush();
            }
        }
    }//GEN-LAST:event_saveMenuItemActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    javax.swing.JMenuItem exitMenuItem;
    idmapmaker.IDMapPanel mapPanel;
    javax.swing.JScrollPane mapScrollPane;
    javax.swing.JMenuItem saveMenuItem;
    javax.swing.JCheckBoxMenuItem showIdsMenuItem;
    javax.swing.JCheckBoxMenuItem showNamesMenuItem;
    javax.swing.JCheckBoxMenuItem showSeaIdsMenuItem;
    javax.swing.JLabel statusLabel;
    javax.swing.JMenuItem zoomInMenuItem;
    javax.swing.JMenuItem zoomOutMenuItem;
    // End of variables declaration//GEN-END:variables
    
    private void doClose() {
        dispose();
    }
}
